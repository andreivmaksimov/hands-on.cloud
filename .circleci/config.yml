version: 2.1

references:

working_directory: &working_directory
  /home/circleci/project

default_hugo_config: &default_hugo_config
  docker:
    - image: cibuilds/hugo:latest
  working_directory: *working_directory

default_terraform_config: &default_terraform_config
  docker:
    - image: hashicorp/terraform:0.12.29
  working_directory: *working_directory

set_environment: &set_environment
  run:
    name: Set environment
    command: |
      cd && touch $BASH_ENV
      if [ "${CIRCLE_BRANCH}" == "master" ]; then
        echo 'export ENVIRONMENT=default' >> $BASH_ENV
        echo 'export ENVIRONMENT_DOMAIN=hands-on.cloud' >> $BASH_ENV
      else
        echo 'export ENVIRONMENT=staging' >> $BASH_ENV
        ENVIRONMENT_ID="pr-${CIRCLE_PR_NUMBER}"
        echo "export ENVIRONMENT_ID=${ENVIRONMENT_ID}" >> $BASH_ENV
        ENVIRONMENT_DOMAIN="${ENVIRONMENT_ID}.hands-on.cloud"
        echo "export ENVIRONMENT_DOMAIN=${ENVIRONMENT_DOMAIN}" >> $BASH_ENV
      fi
      printenv
      pwd

repo_cache_key: &repo_cache_key
  v1-repo-{{ .Branch }}-{{ .Revision }}

# Step to restore repository from cache
restore_repo: &restore_repo
  restore_cache:
    key: *repo_cache_key

save_repo: &save_repo
  save_cache:
    key: *repo_cache_key
    paths:
      - *working_directory

terraform_init: &terraform_init
  run:
    name: terraform init
    command: |
      . $BASH_ENV
      cd terraform/${ENVIRONMENT}
      terraform init

jobs:

  run_unit_tests:
    docker:
      - image: python:3.7
    working_directory: *working_directory
    steps:
      - *set_environment
      - checkout
      - run:
          name: Install Pytest
          command: |
            pip install -r requirements.txt
      - run:
          name: Run Pytest tests
          command: |
            . $BASH_ENV
            pytest tests -s
      - *save_repo
      - persist_to_workspace:
          root: *working_directory
          paths:
            - ./

  build:
    <<: *default_hugo_config
    steps:
      - *set_environment
      - *restore_repo
      - run:
          name: Build Hugo website
          command: |
            . $BASH_ENV
            PROJECT_HOME=$(pwd)
            echo "Running Hugo build..."
            ls -al
            cd hugo
            if [ $CIRCLE_BRANCH == "master" ]; then
              sed -r -i.bak "s@http:\/\/localhost@https:\/\/hands-on.cloud@g" config.toml
            else
              sed -r -i.bak "s@http:\/\/localhost@http:\/\/${ENVIRONMENT_DOMAIN}@g" config.toml
            fi
            export HUGO_ENV=production
            hugo -v -d build || hugo -v -d build
            echo "Adding ads.txt to support AdSense requirements..."
            echo "google.com, pub-2729052102059896, DIRECT, f08c47fec0942fa0" > build/ads.txt
            cd "$PROJECT_HOME"
      - *save_repo
      - persist_to_workspace:
          root: *working_directory
          paths:
            - ./

  create_or_update_testing:
    <<: *default_terraform_config
    steps:
      - *set_environment
      - *restore_repo
      - *terraform_init
      - run:
          name: Creating Terraform TEST environment 
          command: |
            . $BASH_ENV
            cd terraform/${ENVIRONMENT}
            terraform workspace new ${ENVIRONMENT_ID} || terraform workspace select ${ENVIRONMENT_ID} || exit -1
            terraform plan -out=../terraform_testing.plan
            terraform apply --auto-approve ../terraform_testing.plan
      - persist_to_workspace:
          root: *working_directory
          paths:
            - ./

  deploy_test_website:
    docker:
      - image: xueshanf/awscli
    working_directory: *working_directory
    steps:
      - *set_environment
      - *restore_repo
      - attach_workspace:
          at: *working_directory
      - deploy:
          name: Deploy Hugo website
          command: |
            . $BASH_ENV
            aws s3 sync hugo/build s3://${ENVIRONMENT_DOMAIN} --delete
            echo "Set Cache-Control header for all objects within a bucket"
            aws s3 cp s3://${ENVIRONMENT_DOMAIN}/ s3://${ENVIRONMENT_DOMAIN}/ --metadata-directive REPLACE --recursive --cache-control max-age=2592000

  create_or_update_prod:
    <<: *default_terraform_config
    steps:
      - *set_environment
      - *restore_repo
      - run:
          name: Updating Terraform PROD environment
          command: |
            . $BASH_ENV
            cd terraform/default
            terraform init
            terraform workspace select default
            terraform plan -out=../terraform_prod.plan
            terraform apply --auto-approve ../terraform_prod.plan
      - persist_to_workspace:
          root: *working_directory
          paths:
            - ./

  deploy_prod_website:
    docker:
      - image: xueshanf/awscli
    working_directory: *working_directory
    steps:
      - *set_environment
      - *restore_repo
      - attach_workspace:
          at: *working_directory
      - deploy:
          name: Deploy Hugo website
          command: |
            . $BASH_ENV
            aws s3 sync hugo/build s3://origin.hands-on.cloud --delete
            aws s3 cp s3://origin.hands-on.cloud/ s3://origin.hands-on.cloud/ --metadata-directive REPLACE --recursive --cache-control max-age=2592000
            aws cloudfront create-invalidation --distribution-id=EWBD72KPWWTA4 --paths "/*"
            curl 'http://www.google.com/webmasters/sitemaps/ping?sitemap=https%3A%2F%2Fhands-on.cloud%2Fsitemap.xml'
  destroy_testing:
    <<: *default_terraform_config
    steps:
      - *set_environment
      - *restore_repo
      - *terraform_init
      - attach_workspace:
          at: *working_directory
      - run:
          name: Deleting Terraform environment
          command: |
            . $BASH_ENV
            cd terraform/${ENVIRONMENT}
            terraform workspace select ${ENVIRONMENT_ID}
            terraform destroy --auto-approve
            terraform workspace select default
            terraform workspace delete ${ENVIRONMENT_ID}
  merge_with_master:
    docker:
      - image: xueshanf/awscli
    working_directory: *working_directory
    steps:
      - *set_environment
      - *restore_repo
      - attach_workspace:
          at: *working_directory
      - deploy:
          name: Merge pull-request with master
          command: |
            . $BASH_ENV
            if [[ -n ${CIRCLE_PR_NUMBER} ]]; then
              curl -XPUT \
                  -H "Authorization: token $GITHUB_TOKEN" \
                  https://api.github.com/repos/hands-on-cloud/hands-on.cloud/pulls/$CIRCLE_PR_NUMBER/merge
            fi

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - run_unit_tests
      - build:
          context: hands-on-cloud
          requires:
            - run_unit_tests
      - create_or_update_testing:
          context: hands-on-cloud
          requires:
            - build
          filters:
            branches:
              ignore:
                - master
      - deploy_test_website:
          context: hands-on-cloud
          requires:
            - create_or_update_testing
          filters:
            branches:
              ignore:
                - master
      # - request-manual-approval:
      #     type: approval
      #     requires:
      #       - deploy_test_website
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      - destroy_testing:
          context: hands-on-cloud
          requires:
            - deploy_test_website
            #- request-manual-approval
          filters:
            branches:
              ignore:
                - master
      - merge_with_master:
          context: hands-on-cloud
          requires:
            - destroy_testing
          filters:
            branches:
              ignore:
                - master
      - create_or_update_prod:
          context: hands-on-cloud
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy_prod_website:
          context: hands-on-cloud
          requires:
            - create_or_update_prod
          filters:
            branches:
              only: master
